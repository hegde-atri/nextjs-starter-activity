#+title: Session3
#+author: Atri Hegde

* Preface
- Why it didn't check for session in the POST api.

* TOC :TOC:
- [[#preface][Preface]]
- [[#securing-api][Securing API]]
- [[#easy-access-to-userid][Easy access to =userId=]]
- [[#server-sessions][Server Sessions]]
- [[#new-project][New project.]]

* Securing API

So instead of checking for the =session=, we want to check for the =session?.user= instead.

#+begin_src typescript
export async function POST(req: Request) {
  const session = await getServerSession(authOptions);
  if (session?.user) {
    const user = await prisma.user.findFirst({
      where: {
        email: session?.user?.email,
      },
    });

    let post = await postSchema.parseAsync(await req.json());

    let res = await prisma.post.create({
      data: {
        title: post.title,
        description: post.description,
        userId: user?.id!,
      },
    });

    return NextResponse.json(res);
  } else {
    return NextResponse.error();
  }
}
#+end_src

* Easy access to =userId=

Here we add a callback option to our =authOptions=. We are modifying our =session= callback. i.e. what happens when we request a session. Here it allows us to modify what the sessions contains.

Here =...session= specifies "the rest in session", so we are modifying only user and keeping the rest to its default. Inside =user=, we are adding =id= and setting it to =user.id=. The =...session.user= means keep everything else the same.

Simple as that, now we have a custom session object. We can customise it further if needed, such as adding the field =role= if we want to have different user roles, we can just check from the session rather than having to make database calls.

#+begin_src diff
export const authOptions: AuthOptions = {
  adapter: PrismaAdapter(prisma),
+  callbacks: {
+    session: ({ session, user }) => ({
+      ...session,
+      user: {
+        ...session.user,
+        id: user.id,
+      },
+    }),
+  },
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
};
#+end_src

* Server Sessions

Let's add this handy-dandy snippet of code to avoid two imports just to get session.

I've made this file in =lib/auth.ts=.

#+begin_src typescript
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { getServerSession } from "next-auth";

export const getServerAuthSession = () => getServerSession(authOptions);
#+end_src

* New project.

Now head over to the next part which is the [[https://github.com/hegde-atri/nextjs-todo-app][todo app]].
