#+title: Session2
#+author: Atri Hegde

* Preface

Now that we know the basics our stack, let's start GETting and POSTing data from our database.

* Table of Contents :TOC:
- [[#preface][Preface]]
- [[#page-metadata][Page metadata]]
  - [[#default-metadata][Default metadata]]
- [[#creating-a-home-page][Creating a home page]]
  - [[#icons][Icons]]
  - [[#basic-styling][Basic styling.]]
- [[#feed-page][Feed page]]
  - [[#creating-the-page][Creating the page]]

* Page metadata

We want to be able to set custom page title and descriptions for all of our pages. For this first we set it in the root layout.

This means, if we don't specify a change, all our pages have that 'default' metadata.

#+begin_quote
Metadata is the hidden page data that the browser and bots on the internet use to get information on the website.
- Page title: displayed on the tab
- Page description: displayed on google search results, and in small text in url previews.
- keywords: Just "tags" used for SEO.
#+end_quote

** Default metadata

We can see that Next.js has already given us some default metadata in =app/layout.tsx=.

#+begin_src typescript
export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};
#+end_src

You can put this snippet on any page, and it will have those fields updated for that page.

Lets modify this by adding a logo/image and some keywords.

First copy over the logo from [[./public/logo.png][the public directory]] and put it in your project's public directory.

#+begin_quote
Here we also add =metadataBase= property. This is because we are specifying which domain we are getting the images from.
#+end_quote

#+begin_src typescript
export const metadata: Metadata = {
  metadataBase: new URL('https://localhost:3000'),
  title: 'Instr',
  description: 'Twitter like application where you share posts.',
  keywords: 'Instr, Twitter, Instagram, Reddit',
  icons: '/logo.png',
  openGraph: {
    title: 'Instr',
    description: 'Twitter like application where you share posts.',
    images: '/logo.png',
  },
};
#+end_src

Now if you refresh the page, you should see the new icon on your tab from the =icons= property and when you share this url, the same logo next to it.

This piece of typescript code produced the following HTML.

#+begin_src html
<title>Instr</title>
<meta name="description" content="Twitter like application where you share posts."/>
<meta name="keywords" content="Instr, Twitter, Instagram, Reddit"/><meta property="og:title" content="Instr"/>
<meta property="og:description" content="Twitter like application where you share posts."/>
<meta property="og:image" content="http://localhost:3000/logo.png"/>
<meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:title" content="Instr"/>
<meta name="twitter:description" content="Twitter like application where you share posts."/>
<meta name="twitter:image" content="http://localhost:3000/logo.png"/>
<link rel="icon" href="/favicon.ico" type="image/x-icon" sizes="16x16"/>
#+end_src

* Creating a home page

Let's get some of the prebuilt Next.js css.
Go delete everything except the tailwind imports in =globals.css= so it looks like this:

#+begin_src css
@tailwind base;
@tailwind components;
@tailwind utilities;
#+end_src

** Icons

We want to use some icons later on, so lets install an icons package. I like tabler-icons.

#+begin_src shell
yarn add @tabler/icons-react
#+end_src

You can find the list of icons on their [[https://tabler-icons.io][website]].

** Basic styling.

1. Please go to =layout.tsx= and have a look at the =className='s on the html, body and main tags.

#+begin_quote
Some basic styling such as page background, text colour, and some nice padding on our =<main>= to give make it look better (also slightly responsive?!).
#+end_quote

2. Place your =NavMenu= component above the main tag rather than inside of it.

#+begin_quote
Our navbar resizing and styling are different to the contents of the page. So we need to not have it inside of the main tag.
#+end_quote

3. Update your =Navbar= component with the updated code.

#+begin_quote
Make it an actual navbar. By default almost everything in tailwind is unstyled like links, buttons and headings.

Let's give our links underlines and buttons backgrounds from now on!
#+end_quote

4. Also update your =page.tsx= with the provided code.

#+begin_quote
Basic landing page. We also have some conditional rendering at the bottom.
#+end_quote

You now have a basic home screen.



* Feed page

** Creating the page

We want tit to be a guarded page.

First lets create the directory for this route =app/feed=.

Then let's create the file =page.tsx= inside this folder.

#+begin_src typescript
const Feed = () => {
  return (
    <div>
      <p>Feed page</p>
    </div>
  );
};

export default Feed;
#+end_src
